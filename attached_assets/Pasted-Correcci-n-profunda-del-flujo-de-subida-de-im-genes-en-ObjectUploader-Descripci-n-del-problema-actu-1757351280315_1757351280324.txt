Corrección profunda del flujo de subida de imágenes en ObjectUploader

Descripción del problema actual:

La interfaz ya no dispara el formulario al hacer click en el uploader (eso está resuelto).

Sin embargo, al subir una imagen, aparece el error Failed to construct 'URL': Invalid URL o 0 of 1 file uploaded.

Esto indica que el frontend recibe una URL inválida o incompleta desde el backend, o que el manejo de la respuesta no es consistente.

La imagen se sube al servidor, pero el ObjectUploader no obtiene la URL correcta para mostrarla en el preview.

Causas posibles:

El endpoint /api/objects/direct-upload no está devolviendo un objeto con la propiedad url válida.

La respuesta del servidor puede contener undefined o rutas relativas que el frontend no puede transformar en URL absoluta.

El handleUploadComplete en el frontend intenta construir una URL usando datos incompletos o incorrectos.

Nombres de archivo con caracteres problemáticos que rompen la construcción de la URL.

Acciones recomendadas para resolverlo a fondo:

Backend:

Asegúrate de que el endpoint /api/objects/direct-upload/:objectId retorne siempre un JSON con url completa (incluyendo protocolo https:// y dominio).

Sanitiza el nombre de archivo para que no contenga caracteres inválidos.

Agrega logging para cada upload para verificar que la URL generada sea correcta.

Frontend (ObjectUploader / handleUploadComplete):

Verifica que la respuesta del servidor contenga uploadedFile.response?.url antes de usarla.

Implementa un fallback robusto: si no existe response.url, construye la URL combinando BASE_URL + nombre de archivo.

Usa try { new URL(...) } catch { mostrar error } para detectar URLs inválidas antes de actualizar tempImageUrl.

Mantén buttonProps={{ type: "button" }} para evitar envíos accidentales del formulario.

Agrega logging con console.log(uploadedFile) para depurar cualquier respuesta inesperada.

Verificación final:

Al subir una imagen, la URL guardada en tempImageUrl debe ser absoluta y accesible desde el navegador.

El preview debe actualizarse automáticamente sin errores.

Cualquier error de URL debe mostrarse claramente en consola para debugging.

Resumen práctico:

Backend → siempre retorna url válida.

Frontend → valida la URL antes de usarla y maneja fallbacks.

Logging completo para debug.

Con estas acciones, el flujo de subida de imagen será confiable, el ObjectUploader mostrará correctamente la imagen en el preview, y no habrá errores de URL inválida.